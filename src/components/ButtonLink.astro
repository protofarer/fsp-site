---
interface Props {
  href: string;
  class?: string;
  variant?: 'filled' | 'outlined';
  color?: 'dark' | 'light';
  bold?: boolean;
}

const {
  href,
  class: className = '',
  variant = 'filled',
  color = 'dark',
  bold = false,
} = Astro.props;

const classBase =
  'inline-block px-3 py-2 rounded-md transition-colors duration-200';

let classText = '';
let colorBackground = '';
let classHover = '';
let classBorder = '';

if (color === 'dark' && variant === 'filled') {
  classText = '!text-white';
  colorBackground = 'bg-gray-800';
  classHover = 'hover:bg-gray-700';
} else if (color === 'light' && variant === 'filled') {
  classText = '!text-black';
  colorBackground = 'bg-white';
  classHover = 'hover:bg-gray-200';
} else if (color === 'light' && variant === 'outlined') {
  classText = '!text-white';
  colorBackground = 'bg-transparent';
  classBorder = 'border-2 border-solid border-white';
  classHover = 'hover:text-emerald-300 hover:border-emerald-300';
} else if (color === 'dark' && variant === 'outlined') {
  classText = '!text-black';
  colorBackground = 'bg-transparent';
  classBorder = 'border-2 border-solid border-black';
  classHover = 'hover:text-emerald-300 hover:border-emerald-300';
}

classText += bold ? ' font-bold' : '';
classText += ' text-center';

const computedClass = [
  classBase,
  classText,
  colorBackground,
  classHover,
  classBorder,
  className,
];
---

<a href={href} class:list={computedClass}>
  <slot />
</a>
