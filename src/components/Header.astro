---
import NavLink from './NavLink.astro';
import SITE_MAP from '../constants/site-map';
import CustomLink from './CustomLink.astro';
import { Image } from 'astro:assets';
import favicon from '../../public/favicon.svg'

const linkClassCompact = 'font-bold tracking-wide text-center block w-full';
const linkItems = [
  { label: 'Home', href: '/' },
  { label: 'Services', href: SITE_MAP.services },
  { label: 'Coaches', href: SITE_MAP.coaches },
  { label: 'About', href: SITE_MAP.about },
  { label: 'Contact', href: SITE_MAP.contact },
];
const classActive = '!text-emerald-700 !font-bold transition-colors';
const pathname = new URL(Astro.request.url).pathname;
---

<header class="sticky top-0 z-50 shadow-md flex justify-center bg-white">
  <nav class="w-full py-1 px-4 max-w-3xl">
    <div class="flex justify-between items-center">
      <CustomLink href="/">
        <div
          class="px-2 py-1"
        >
        <Image height={48} width={48} src={favicon} alt="frontier sports performance logo"></Image>
        </div>
      </CustomLink>

      <!-- Mobile menu button -->
      <button
        id="menu-toggle"
        class="block md:hidden p-2 text-slate-800 hover:text-slate-500 focus:outline-none"
        aria-label="Toggle menu"
      >
        <svg
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
      </button>
      <!-- Desktop navigation -->
      <div class="hidden md:block">
        <div class="flex items-center space-x-4">
          {
            linkItems.map(
              (item) =>
                item.href !== '/' && (
                  <NavLink
                    href={item.href}
                    class:list={[pathname === item.href && classActive]}
                  >
                    {item.label}
                  </NavLink>
                )
            )
          }
        </div>
      </div>
    </div>
  </nav>
</header>

<!-- Mobile nav menu -->
<div id="mobile-menu" class="fixed inset-0 z-50 hidden md:hidden">
  <!-- Backdrop -->
  <div class="absolute inset-0 bg-black/20 backdrop-blur-sm"></div>

  <!-- Menu content -->
  <div
    class="absolute right-0 top-0 h-full w-64 bg-white shadow-lg transform transition-transform duration-200 translate-x-full"
  >
    <div class="p-4 space-y-1">
      {
        linkItems.map((item) => (
          <NavLink href={item.href} class={linkClassCompact}>
            {item.label}
          </NavLink>
        ))
      }
    </div>
  </div>
</div>

<!-- Fix scroll position for navigating to a fragment -->
<style is:global>
  :root {
    --header-height: 3rem;
  }

  [id] {
    scroll-margin-top: var(--header-height);
  }
</style>

<script>
  const menuToggle = document.getElementById('menu-toggle');
  const mobileMenu = document.getElementById('mobile-menu');
  const menuContent = mobileMenu?.querySelector('div:last-child');

  const header = document.querySelector('header');

  if (menuToggle && mobileMenu && menuContent) {
    let isAnimating = false

    const openMenu = () => {
      if (isAnimating) return;
      isAnimating = true

      mobileMenu.classList.remove('hidden')

      requestAnimationFrame(() => {
        menuContent.classList.remove('translate-x-full');
        setTimeout(() => { isAnimating = false}, 200)
      });
    }

    const closeMenu = () => {
      if (isAnimating) return
      isAnimating = true

      menuContent.classList.add('translate-x-full');
      // Wait for anim to complete before hiding
      setTimeout(() => {
        mobileMenu.classList.add('hidden');
        isAnimating = false
      }, 200);
    };


    menuToggle.addEventListener('click', (e) => {
      e.stopPropagation();
      if (mobileMenu.classList.contains('hidden')) {
        openMenu()
      } else {
        closeMenu()
      }
    });

    // Animate in
    requestAnimationFrame(() => {
      menuContent.classList.remove('translate-x-full');
    });


    // Close menu when click backdrop or menu area outside of links
    mobileMenu.addEventListener('click', (e) => {
      const target = e.target as HTMLElement;
      const isLink = target.tagName === 'A' || target.closest('a')
      if (!isLink) {
        closeMenu()
      }
    })

    // Close menu when clicking a link
    mobileMenu.querySelectorAll('a').forEach((link) => {
      link.addEventListener('click', closeMenu)
    });

    // Handle escape key
    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape' && !mobileMenu.classList.contains('hidden')) {
        closeMenu()
      }
    });
  }
</script>
